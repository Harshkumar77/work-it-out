// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  name          String         @db.VarChar(50)
  dob           DateTime?
  height        Int?
  tutorialDone  Boolean        @default(false)
  email         String         @unique @db.VarChar(50)
  picture       String         @db.VarChar(200)
  ActivityData  ActivityData?
  NutritionData NutritionData?
  WeightData    WeightData?
}

// ACTIVITY

model ActivityData {
  id                Int                 @id @unique @default(autoincrement())
  userId            String              @unique
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  ActivityDataOfDay ActivityDataOfDay[]
}

model ActivityDataOfDay {
  id                 Int                  @id @unique @default(autoincrement())
  ActivityData       ActivityData         @relation(fields: [activityDataId], references: [id], onDelete: Cascade)
  activityDataId     Int
  date               DateTime
  steps              Int                  @default(0)
  ExcercisePerformed ExcercisePerformed[]
}

model Excercise {
  id                 Int                  @id @unique @default(autoincrement())
  name               String               @unique @db.VarChar(30)
  img                String
  ExcercisePerformed ExcercisePerformed[]
  Muscle             Muscle               @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  muscleId           Int
}

model ExcercisePerformed {
  id                  Int               @id @unique @default(autoincrement())
  Excercise           Excercise         @relation(fields: [excerciseId], references: [id], onDelete: Cascade)
  excerciseId         Int
  ActivityDataOfDay   ActivityDataOfDay @relation(fields: [activityDataOfDayId], references: [id], onDelete: Cascade)
  activityDataOfDayId Int
  SetPerformed        SetPerformed[]
}

model Muscle {
  id        Int         @id @unique @default(autoincrement())
  name      String      @unique @db.VarChar(20)
  Excercise Excercise[]
}

model SetPerformed {
  id                   Int                @id @unique @default(autoincrement())
  rep                  Int                @default(0)
  weight               Decimal            @default(0)
  oneRepMax            Decimal            @default(0)
  ExcercisePerformed   ExcercisePerformed @relation(fields: [excercisePerformedId], references: [id], onDelete: Cascade)
  excercisePerformedId Int
}

// NUTRITION

model NutritionData {
  id                 Int                  @id @unique @default(autoincrement())
  userId             String               @unique
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  NutritionDataOfDay NutritionDataOfDay[]
}

model NutritionDataOfDay {
  id              Int           @id @unique @default(autoincrement())
  NutritionData   NutritionData @relation(fields: [nutritionDataId], references: [id], onDelete: Cascade)
  nutritionDataId Int
  date            DateTime
  water           Int           @default(0)
  calorie         Int           @default(0)
  MealTaken       MealTaken[]
}

model MealTaken {
  id                   Int                @id @unique @default(autoincrement())
  meal_name            String             @db.VarChar(300)
  calorie              Int                @default(0)
  NutritionDataOfDay   NutritionDataOfDay @relation(fields: [nutritionDataOfDayId], references: [id], onDelete: Cascade)
  nutritionDataOfDayId Int
}

// WEIGHT

model WeightData {
  id          Int           @id @unique @default(autoincrement())
  userId      String        @unique
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  WeightOfDay WeightOfDay[]
}

model WeightOfDay {
  id           Int        @id @unique @default(autoincrement())
  WeightData   WeightData @relation(fields: [weightDataId], references: [id], onDelete: Cascade)
  date         DateTime
  Weight       Decimal
  weightDataId Int
}

// PROGRESS

// model ProgressData {
//   id                Int                 @id @unique @default(autoincrement())
//   userId            String              @unique
//   User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
//   ProgressDataOfDay ProgressDataOfDay[]
// }

// model ProgressDataOfDay {
//   id             Int          @id @unique @default(autoincrement())
//   ProgressData   ProgressData @relation(fields: [progressDataId], references: [id], onDelete: Cascade)
//   date           DateTime
//   progressDataId Int
// }
